import dagre from '@dagrejs/dagre';
// Placeholder for initial nodes and edges types
import { type Node, type Edge } from 'reactflow';
/**
 * @constant {number} DEFAULT_NODE_WIDTH - The default width of a node.
 * @constant {number} DEFAULT_NODE_HEIGHT - The default height of a node.
 * @constant {number} ADJUST_PARAMS_NODES_WITH_PARENT_ID  - The default adjustment parameter for nodes with a parent ID.
 */
import { DEFAULT_NODE_WIDTH, DEFAULT_NODE_HEIGHT } from '@utils/constants';

/**
 * Sets up the Dagre flow.
 * 'rankdir' is set to 'TB' to ensure the graph is oriented from top to bottom.
 */

const setupDagreFlow = () => {
  const dagreFlow = new dagre.graphlib.Graph();
  dagreFlow.setDefaultEdgeLabel(() => ({}));
  dagreFlow.setGraph({ rankdir: 'TB' });
  return dagreFlow;
};

/**
 * Automatically layouts the graph using Dagre.
 * Modifies the original nodes array to ensure consistency across the application.
 *
 * @param {Node[]} initialNodes - The initial nodes of the graph generated by LLM.
 * @param {Edge[]} initialEdges - The initial edges of the graph generated by LLM.
 * @returns {{nodes: Node[], edges: Edge[]}} The nodes and edges with updated positions.
 */

function dagreAutoLayout(initialNodes: Node[], initialEdges: Edge[]) {
  const dagreGraph = setupDagreFlow();

  initialNodes.forEach((node) => {
    dagreGraph.setNode(node.id, {
      width: DEFAULT_NODE_WIDTH,
      height: DEFAULT_NODE_HEIGHT,
    });
  });

  initialEdges.forEach((edge) => {
    edge.type = 'linktaEdge';
    dagreGraph.setEdge(edge.source, edge.target);
  });

  //already spreaded out the nodes
  dagre.layout(dagreGraph);

  initialNodes.forEach((node) => {
    node.type = 'linktaNode';

    const nodeWithPosition = dagreGraph.node(node.id);

    node.position = {
      x: nodeWithPosition.x - nodeWithPosition.width / 2,
      y: nodeWithPosition.y - nodeWithPosition.height / 2,
    };
  });

  return { nodes: initialNodes, edges: initialEdges };
}

export default dagreAutoLayout;
