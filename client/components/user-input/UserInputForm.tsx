import React, { useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { Controller, useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { userInputInputSchema } from '@validators/userInputSchemas';
import {
  TextField,
  Button,
  FormControlLabel,
  Box,
  Typography,
  Checkbox,
} from '@mui/material';
import styles from '@styles/UserInputView.module.css';
import { useCreateLinktaFlowMutation } from '@/hooks/useCreateLinktaFlowMutation';
import { useQueryClient } from '@tanstack/react-query';
import useDebounce from '@hooks/useDebounce';
import { AxiosError } from 'axios';
import useUserInputStore from '@/stores/UserInputStore';
import useLoadingStore from '@/stores/LoadingStore';
import { useNotification } from '@hooks/useNotification';

interface CustomFormData {
  input: string;
}

const UserInputForm = () => {
  const {
    handleSubmit,
    reset,
    control,
    formState: { errors },
  } = useForm({
    resolver: zodResolver(userInputInputSchema),
    defaultValues: {
      input: '',
    },
  });
  const navigate = useNavigate();
  const createLinktaFlowMutation = useCreateLinktaFlowMutation();
  const queryClient = useQueryClient();
  const { showNotification } = useNotification();

  const isChecked = useUserInputStore((state) => state.isChecked);
  const setIsChecked = useUserInputStore((state) => state.setIsChecked);

  const setLoading = useLoadingStore((state) => state.setLoading);

  const onSubmit = useCallback(
    async (data: CustomFormData) => {
      setLoading(true);
      try {
        const response = await createLinktaFlowMutation.mutateAsync({
          input: data.input,
        });
        await queryClient.invalidateQueries({ queryKey: ['inputHistory'] });
        reset();
        navigate(`/output/${response.userInputId}`);
        showNotification('LinktaFlow created successfully.', 'success');
      } catch (error) {
        console.error('Failed to create LinktaFlow: ', error);
        let errorMessage =
          'Unable to create LinktaFlow. Please check your input and try again.';

        if (error instanceof AxiosError && error.response) {
          errorMessage = error.response.data || errorMessage;
        } else if (error instanceof Error) {
          errorMessage = error.message;
        }

        showNotification(errorMessage, 'error', {
          duration: 6000,
          action: {
            label: 'Retry',
            onClick: () => handleSubmit(debouncedSubmit)(),
          },
        });
      } finally {
        setLoading(false);
      }
    },
    [
      createLinktaFlowMutation,
      queryClient,
      reset,
      navigate,
      showNotification,
      setLoading,
      handleSubmit,
    ],
  );

  const debouncedSubmit = useDebounce(onSubmit, 500);

  return (
    <>
      <form
        onSubmit={handleSubmit(debouncedSubmit)}
        className={`${styles.userInputForm}`}
      >
        <Typography
          className={`${styles.userInputFormTitle}`}
          variant='h6'
          sx={{ textAlign: 'left', color: 'text.primary', mb: 2 }}
        >
          Start your learning journey here:
        </Typography>

        <Box className={`${styles.inputsContainer}`}>
          <Controller
            name='input'
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                variant='outlined'
                className={`${styles.userInputTextField}`}
                error={!!errors.input}
                helperText={errors.input ? errors.input.message : ''}
              />
            )}
          />

          <FormControlLabel
            className={`${styles.userInputDisclaimer}`}
            label='Content on this site may be generated by artificial intelligence (AI). Please use discretion and verify information where necessary.'
            sx={{ color: 'text.primary' }}
            control={
              <Checkbox
                className={`${styles.UserInputCheckbox}`}
                checked={isChecked}
                onChange={(e) => setIsChecked(e.target.checked)}
              />
            }
          />
        </Box>

        <Button
          variant='contained'
          color='secondary'
          className={`${styles.userInputSubmitButton}`}
          type='submit'
          disabled={!isChecked}
        >
          Generate
        </Button>
      </form>
    </>
  );
};

export default UserInputForm;
