import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Controller, useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { userInputInputSchema } from '@validators/userInputSchemas';
import {
  TextField,
  Button,
  FormControlLabel,
  Box,
  Typography,
  Checkbox,
} from '@mui/material';
import styles from '@styles/UserInputView.module.css';
import { useCreateLinktaFlowMutation } from '@/hooks/useCreateLinktaFlowMutation';
import SnackBarNotification from '@components/common/SnackBarNotification';
import type { SnackbarSeverity } from '@/types/snackBar';
import { useQueryClient } from '@tanstack/react-query';
import useThrottle from '@hooks/useThrottle';
import { AxiosError } from 'axios';
import Loader from '@/components/common/Loader';

interface CustomFormData {
  input: string;
  isChecked: boolean;
}

const UserInputForm = () => {
  const {
    handleSubmit,
    reset,
    control,
    watch,
    formState: { errors },
  } = useForm({
    resolver: zodResolver(userInputInputSchema),
    defaultValues: {
      input: '',
      isChecked: JSON.parse('true' || 'false'),
    },
  });
  const navigate = useNavigate();
  const createLinktaFlowMutation = useCreateLinktaFlowMutation();
  const queryClient = useQueryClient();
  const isChecked = watch('isChecked');
  const [isSnackbarOpen, setIsSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] =
    useState<SnackbarSeverity>('success');

  const resetSnackbarStates = () => {
    setIsSnackbarOpen(false);
    setSnackbarMessage('');
    setSnackbarSeverity('success');
  };

  const throttledSubmit = useThrottle(async (data: CustomFormData) => {
    try {
      const response = await createLinktaFlowMutation.mutateAsync({
        input: data.input,
      });
      await queryClient.invalidateQueries({ queryKey: ['inputHistory'] });
      reset();
      navigate(`/output/${response.userInputId}`);
    } catch (error) {
      console.error('Failed to create LinktaFlow: ', error);
      let errorMessage = 'Failed to create LinktaFlow. Please try again.';

      if (error instanceof AxiosError && error.response) {
        errorMessage = error.response.data || errorMessage;
      } else if (error instanceof Error) {
        errorMessage = error.message;
      }

      setIsSnackbarOpen(true);
      setSnackbarMessage(errorMessage);
      setSnackbarSeverity('error');
    }
  }, 1000);

  return (
    <>
      {createLinktaFlowMutation.status === 'pending' ? (
        <Loader />
      ) : (
        <form
          onSubmit={handleSubmit(throttledSubmit)}
          className={`${styles.userInputForm}`}
        >
          <Typography
            className={`${styles.userInputFormTitle}`}
            variant='h6'
            sx={{ textAlign: 'left', color: 'text.primary', mb: 2 }}
          >
            Start your learning journey here:
          </Typography>

          <Box className={`${styles.inputsContainer}`}>
            <Controller
              name='input'
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  variant='outlined'
                  className={`${styles.userInputTextField}`}
                  error={!!errors.input}
                  helperText={errors.input ? errors.input.message : ''}
                />
              )}
            />

            <FormControlLabel
              className={`${styles.userInputDisclaimer}`}
              label='Content on this site may be generated by artificial intelligence (AI). Please use discretion and verify information where necessary.'
              sx={{ color: 'text.primary' }}
              control={
                <Controller
                  name='isChecked'
                  control={control}
                  render={({ field }) => (
                    <Checkbox
                      className={`${styles.UserInputCheckbox}`}
                      {...field}
                      checked={field.value}
                    />
                  )}
                />
              }
            />
          </Box>

          <Button
            variant='contained'
            className={`${styles.userInputSubmitButton}`}
            type='submit'
            disabled={!isChecked}
          >
            Generate
          </Button>
        </form>
      )}
      <SnackBarNotification
        open={isSnackbarOpen}
        message={snackbarMessage}
        severity={snackbarSeverity}
        callerUpdater={resetSnackbarStates}
      />
    </>
  );
};

export default UserInputForm;
