import React, { useEffect } from 'react';
import axios from 'axios';
import type { TextFieldProps, ButtonProps } from '@mui/material';
import {
  TextField,
  Button,
  FormControlLabel,
  Box,
  Typography,
  Checkbox,
} from '@mui/material';
import { styled } from '@mui/material/styles';
import { useMutation } from '@tanstack/react-query';
import { useNavigate } from 'react-router-dom';
import { MOCK_USER_ID } from '@/mocks';
import { Controller, useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import userInputValidationSchema from '@/utils/zodSchema/userInputValidation';

interface UserInputPayload {
  input: string;
}

const UserInputBar = styled(TextField)<TextFieldProps>(({ theme }) => ({
  width: 700,
  color: theme.palette.secondary.main,
  '& .MuiOutlinedInput-root': {
    borderRadius: '20px',
    '& fieldset': {
      borderColor: theme.palette.secondary.main,
      borderRadius: '20px',
    },
    '& input': {
      backgroundColor: theme.palette.grey[400],
      borderRadius: '20px',
      color: 'black',
    },
  },
}));

const GenerateButton = styled(Button)<ButtonProps>(({ theme }) => ({
  height: 40,
  width: 150,
  color: 'black',
  backgroundColor: theme.palette.secondary.main,
  borderRadius: 20,
  textTransform: 'none',
}));

const UserInputCheckbox = styled(Checkbox)(({ theme }) => ({
  color: theme.palette.primary.main,
}));

const PromptInputForm = () => {
  // Here we utilize the useForm hook's properties to manage form state while also initializing default values and resolving our validation schema.
  // The control object is used by react-hook-form's Controller to link our UserInputBar and UserInputCheckbox components to the form's state, handling any necessary state updates or validation checks.
  const {
    handleSubmit,
    control,
    watch,
    formState: { errors },
  } = useForm({
    resolver: zodResolver(userInputValidationSchema),
    defaultValues: {
      input: '',
      isChecked: JSON.parse(localStorage.getItem('isChecked') || 'false'),
    },
  });
  const navigate = useNavigate();

  // Here we utilize the watch function to subscribe to checkbox state changes and save those changes to our localStorage.
  useEffect(() => {
    const subscription = watch((value, { name }) => {
      if (name === 'isChecked') {
        localStorage.setItem('isChecked', value.isChecked);
      }
    });
    return () => subscription.unsubscribe();
  }, [watch]);

  const newUserInputMutation = useMutation({
    mutationFn: async (userInput: UserInputPayload) => {
      const uniqueRequestId = crypto.randomUUID();

      const response = await axios.post(
        'http://localhost:3000/v1/inputs',
        {
          userId: MOCK_USER_ID,
          input: userInput.input,
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'x-user-id': MOCK_USER_ID,
            requestId: uniqueRequestId,
          },
        }
      );
      return response.data;
    },
    onSuccess: (data) => {
      console.log('UserInput sent successfully', data);
      navigate('/output');
    },
    onError: (error) => {
      console.error('Error sending prompt: ', error);
    },
  });

  const onSubmit = (userInput: UserInputPayload) => {
    newUserInputMutation.mutate({ input: userInput.input });
  };

  return (
    <Box
      display="flex"
      flexDirection="column"
      alignItems="center"
      width="100%"
    >
      <Typography
        variant="h6"
        sx={{ width: '700px', textAlign: 'left', color: 'text.primary', mb: 2 }}
      >
        Start your learning journey here:
      </Typography>
      <form onSubmit={handleSubmit(onSubmit)}>
        <Box
          width="700px"
          display="flex"
          flexDirection="column"
          gap={2}
        >
          <Controller
            name="input"
            control={control}
            render={({ field }) => (
              <UserInputBar
                {...field}
                error={!!errors.input}
                helperText={errors.input ? errors.input.message : ''}
              />
            )}
          />
          <FormControlLabel
            control={
              <Controller
                name="isChecked"
                control={control}
                render={({ field }) => (
                  <UserInputCheckbox
                    {...field}
                    checked={field.value}
                  />
                )}
              />
            }
            label="Content on this site may be generated by artifical intelligence (AI). Please use discretion and verify information where necessary."
            sx={{ color: 'text.primary' }}
          />
          <GenerateButton
            type="submit"
            disabled={!control._formValues.isChecked}
            sx={{ alignSelf: 'center' }}
          >
            Generate
          </GenerateButton>
        </Box>
      </form>
    </Box>
  );
};

export default PromptInputForm;
