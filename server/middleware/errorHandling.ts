import type { MiddlewareError } from '@/server/types/middleware';
import type { Request, Response } from 'express';

/**
 * Create an error object to be used in the error handling middleware.
 *
 * @param method The method where the error occurred
 * @param controller The controller where the error occurred
 * @param message The error message
 * @param error The error object
 * @param status The status code to return
 *
 * @return the error object
 */
export function createError(
  method: string,
  controller: string,
  message: string,
  error: unknown,
  status: number = 500
): MiddlewareError {
  let errorString = 'An unknown error occurred';
  switch (typeof error) {
    case 'string':
      errorString = error;
      break;
    case 'object':
      errorString = JSON.stringify(error);
      break;
    default:
      console.error('Error type not handled in createError.');
      console.error('Error type:', typeof error);
  }

  return {
    log: `Error in ${method} in ${controller}: ${message}`,
    status: status,
    message: {
      err: `Error occured in ${controller}.${method}: ${errorString}`,
    },
  };
}

/**
 * Global error handler for the Express server.
 *
 * @param err The error object generated by the middleware
 * @param _ The request object, not used
 * @param res The response object
 * @return The response object, with error status and error message
 */
export function globalErrorHandler(
  err: Error,
  _: Request,
  res: Response
): Response {
  const defaultError: MiddlewareError = {
    log: 'Express error handler caught unknown middleware error',
    status: 500,
    message: { err: 'An error occurred' },
  };

  const errObj = Object.assign(defaultError, err);
  console.error(errObj.log);

  return res.status(errObj.status).json(errObj.message);
}
