import type { MiddlewareError } from '@/types/errorHandling';
import { CustomError } from '@/utils/customErrors';
import type { Request, Response } from 'express';
import type { NextFunction } from 'express';
import Log4js from 'log4js';

const logger = Log4js.getLogger('[Error Handler]');

/**
 * Global error handler for the Express server.
 *
 * @param err The error object generated by the middleware
 * @param _ The request object, not used
 * @param res The response object
 * @param next The next object, not used
 * @return The response object, with error status and error message
 */

export function errorHandlerMiddleware(
  err: Error,
  _: Request,
  res: Response,
  _next: NextFunction,
): Response {
  const defaultError: MiddlewareError = {
    name: 'MiddlewareError',
    log: 'Express error handler caught unknown middleware error',
    status: 500,
    message: String(err),
  };
  const errObj =
    err instanceof CustomError
      ? {
          ...defaultError,
          status: err.status,
          message: err.message,
          log: err.log,
        }
      : defaultError;

  logger.error('Error Details:', errObj);

  return res.status(errObj.status).json(errObj.message);
}
